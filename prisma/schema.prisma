// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String
  password    String
  nickname    String
  img         String        @default("")
  userLevel   String
  isAdmin     Boolean       @default(false)
  Challenge   Challenge[]
  Translation Translation[]
  Feedback    Feedback[]
  Hearts      Hearts[]
}

model Challenge {
  id          String        @id @default(uuid())
  title       String
  description String
  url         String
  category    String
  type        String
  dueDate     DateTime
  maximum     Int
  state       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  isAdmitted  String
  Translation Translation[]
}

model Translation {
  id          String     @id @default(uuid())
  challenge   Challenge  @relation(fields: [challengeId], references: [id])
  challengeId String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  content     String
  isSubmitted Boolean
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Feedback    Feedback[]
  Hearts      Hearts[]
}

model Feedback {
  id            String      @id @default(uuid())
  translation   Translation @relation(fields: [translationId], references: [id])
  translationId String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Hearts {
  id            String      @id @default(uuid())
  translation   Translation @relation(fields: [translationId], references: [id])
  translationId String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime    @default(now())
}
